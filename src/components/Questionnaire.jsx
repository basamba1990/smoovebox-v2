import { useState, useEffect } from 'react';
import { useSupabaseClient, useUser } from '@supabase/auth-helpers-react';
import { toast } from 'sonner';
import { Button } from './ui/button-enhanced.jsx';

const Questionnaire = ({ onComplete, showSkip = true, isModal = false }) => {
  const [currentStep, setCurrentStep] = useState(1);
  const [answers, setAnswers] = useState({
    colorQuiz: Array(8).fill(''),
    favoriteActivities: [],
    workPreferences: [],
    currentTalent: '',
    improvementAreas: '',
    dreamDescription: '',
    fiveYearVision: '',
    inspirationPerson: '',
    spotbulleNeeds: []
  });

  const [loading, setLoading] = useState(false);
  const supabase = useSupabaseClient();
  const user = useUser();

  // ‚úÖ CORRECTION : Questions avec valeurs s√©curis√©es
  const colorQuizQuestions = [
    {
      question: "Quand un d√©fi se pr√©sente, tu :",
      options: [
        { value: 'red', label: 'fonces sans h√©siter', emoji: '‚ö°' },
        { value: 'blue', label: 'r√©fl√©chis avant d\'agir', emoji: 'üß†' },
        { value: 'green', label: 'encourages ton √©quipe', emoji: 'ü§ù' },
        { value: 'yellow', label: 'imagines une autre solution', emoji: 'üí°' }
      ]
    },
    {
      question: "Dans ton √©quipe, tu pr√©f√®res :",
      options: [
        { value: 'red', label: '√™tre capitaine', emoji: 'üëë' },
        { value: 'blue', label: 'observer la strat√©gie', emoji: 'üìä' },
        { value: 'green', label: 'soutenir les autres', emoji: 'üåü' },
        { value: 'yellow', label: 'cr√©er l\'ambiance', emoji: 'üéâ' }
      ]
    },
    {
      question: "Ce que ton sport t'apprend le plus :",
      options: [
        { value: 'red', label: 'le courage', emoji: 'ü¶Å' },
        { value: 'blue', label: 'la discipline', emoji: '‚è∞' },
        { value: 'green', label: 'la solidarit√©', emoji: 'üë•' },
        { value: 'yellow', label: 'la cr√©ativit√©', emoji: 'üé®' }
      ]
    },
    {
      question: "Quand tu perds un match :",
      options: [
        { value: 'red', label: 'tu veux rejouer tout de suite', emoji: 'üîÑ' },
        { value: 'blue', label: 'tu analyses ton erreur', emoji: 'üîç' },
        { value: 'green', label: 'tu consoles ton co√©quipier', emoji: 'üíù' },
        { value: 'yellow', label: 'tu en rigoles pour relativiser', emoji: 'üòÑ' }
      ]
    },
    {
      question: "Quand tu dois prendre une d√©cision importante :",
      options: [
        { value: 'red', label: 'tu d√©cides vite', emoji: 'üéØ' },
        { value: 'blue', label: 'tu listes les pour/contre', emoji: 'üìù' },
        { value: 'green', label: 'tu demandes leur avis aux autres', emoji: 'üó£Ô∏è' },
        { value: 'yellow', label: 'tu suis ton intuition', emoji: 'üîÆ' }
      ]
    },
    {
      question: "Face √† une nouvelle r√®gle ou consigne :",
      options: [
        { value: 'red', label: 'tu l\'appliques directement', emoji: '‚úÖ' },
        { value: 'blue', label: 'tu v√©rifies chaque d√©tail', emoji: 'üîé' },
        { value: 'green', label: 'tu aides les autres √† comprendre', emoji: 'üë®‚Äçüè´' },
        { value: 'yellow', label: 'tu cherches √† l\'am√©liorer', emoji: 'üöÄ' }
      ]
    },
    {
      question: "Quand tu travailles en groupe :",
      options: [
        { value: 'red', label: 'tu prends le leadership', emoji: 'üëë' },
        { value: 'blue', label: 'tu organises le travail', emoji: 'üìã' },
        { value: 'green', label: 'tu facilites la communication', emoji: 'üìû' },
        { value: 'yellow', label: 'tu proposes des id√©es innovantes', emoji: 'üí°' }
      ]
    },
    {
      question: "Quand tu veux atteindre un objectif :",
      options: [
        { value: 'red', label: 'tu fonces t√™te baiss√©e', emoji: 'üí®' },
        { value: 'blue', label: 'tu planifies √©tape par √©tape', emoji: 'üóìÔ∏è' },
        { value: 'green', label: 'tu t\'entoures des bonnes personnes', emoji: 'üë•' },
        { value: 'yellow', label: 'tu trouves des moyens originaux', emoji: 'üé≠' }
      ]
    }
  ];

  const colorProfiles = {
    red: { 
      name: 'Leader passionn√©', 
      emoji: 'ü¶Å',
      description: 'D√©cideur rapide, orient√© action et r√©sultats',
      traits: ['Leadership', 'Courage', 'D√©termination'],
      color: 'red',
      characteristics: [
        'Prend des d√©cisions rapidement',
        'Aime les d√©fis et la comp√©tition',
        'Direct et orient√© r√©sultats',
        'Naturellement confiant'
      ]
    },
    blue: { 
      name: 'Strat√®ge rigoureux', 
      emoji: 'üß†',
      description: 'Analytique, organis√© et soucieux des d√©tails',
      traits: ['Rigueur', 'Discipline', 'Pr√©cision'],
      color: 'blue',
      characteristics: [
        'Aime les d√©tails et la pr√©cision',
        'R√©fl√©chit avant d\'agir',
        'Organis√© et m√©thodique',
        'Fiable et consciencieux'
      ]
    },
    green: { 
      name: '√âquipier empathique', 
      emoji: 'ü§ù',
      description: 'Coop√©ratif, √† l\'√©coute et solidaire',
      traits: ['Empathie', 'Coop√©ration', 'Soutien'],
      color: 'green',
      characteristics: [
        'Excellent communicateur',
        'Soutient les autres naturellement',
        'Cr√©e l\'harmonie dans le groupe',
        '√Ä l\'√©coute des besoins'
      ]
    },
    yellow: { 
      name: 'Cr√©atif enthousiaste', 
      emoji: 'üí°',
      description: 'Innovant, optimiste et plein d\'id√©es',
      traits: ['Cr√©ativit√©', 'Innovation', 'Enthousiasme'],
      color: 'yellow',
      characteristics: [
        'Plein d\'id√©es nouvelles',
        'Enthousiaste et √©nergique',
        'Aime l\'innovation et le changement',
        'Excellent pour motiver les autres'
      ]
    }
  };

  useEffect(() => {
    if (user) {
      loadExistingResponses();
    }
  }, [user]);

  // ‚úÖ CORRECTION : Chargement s√©curis√© des r√©ponses existantes
  const loadExistingResponses = async () => {
    if (!user) return;
    
    try {
      console.log('üì• Chargement des r√©ponses existantes pour:', user.id);
      
      // ‚úÖ CORRECTION : Utiliser maybeSingle() pour √©viter les erreurs 406
      const { data, error } = await supabase
        .from('questionnaire_responses')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false })
        .limit(1)
        .maybeSingle();

      if (error) {
        // ‚úÖ Gestion sp√©cifique des erreurs 406
        if (error.code === '406' || error.message?.includes('406')) {
          console.log('‚ÑπÔ∏è Aucune r√©ponse existante trouv√©e (erreur 406 normale)');
          return;
        }
        console.error('‚ùå Erreur chargement r√©ponses:', error);
        return;
      }

      if (data) {
        console.log('‚úÖ R√©ponses existantes charg√©es:', data.id);
        setAnswers({
          colorQuiz: data.color_quiz || Array(8).fill(''),
          favoriteActivities: data.preferred_activities || [],
          workPreferences: data.work_preferences || [],
          currentTalent: data.current_talent || '',
          improvementAreas: data.improvement_areas || '',
          dreamDescription: data.dream_description || '',
          fiveYearVision: data.five_year_vision || '',
          inspirationPerson: data.inspiration_person || '',
          spotbulleNeeds: data.spotbulle_needs || []
        });
        
        if (data.completed_at) {
          console.log('üìù Questionnaire d√©j√† compl√©t√©, passage √† l\'√©tape 4');
          setCurrentStep(4);
        }
      }
    } catch (error) {
      console.error('‚ùå Erreur lors du chargement des r√©ponses:', error);
    }
  };

  const handleColorQuizAnswer = (questionIndex, value) => {
    const newColorQuiz = [...answers.colorQuiz];
    newColorQuiz[questionIndex] = value;
    setAnswers(prev => ({
      ...prev,
      colorQuiz: newColorQuiz
    }));
  };

  const calculateDominantColor = () => {
    const counts = { red: 0, blue: 0, green: 0, yellow: 0 };
    answers.colorQuiz.forEach(answer => {
      if (answer && counts[answer] !== undefined) {
        counts[answer]++;
      }
    });
    
    let dominantColor = 'red';
    let maxCount = 0;
    
    Object.entries(counts).forEach(([color, count]) => {
      if (count > maxCount) {
        maxCount = count;
        dominantColor = color;
      }
    });
    
    return dominantColor;
  };

  const handleAnswer = (question, value) => {
    setAnswers(prev => ({
      ...prev,
      [question]: value
    }));
  };

  const handleArrayAnswer = (question, value, checked) => {
    setAnswers(prev => ({
      ...prev,
      [question]: checked 
        ? [...(prev[question] || []), value]
        : (prev[question] || []).filter(item => item !== value)
    }));
  };

  // ‚úÖ CORRECTION : Sauvegarde robuste avec gestion d'erreur am√©lior√©e
  const submitQuestionnaire = async () => {
    if (!user) {
      toast.error('Veuillez vous connecter pour sauvegarder le questionnaire');
      return;
    }

    setLoading(true);
    try {
      console.log('üíæ Sauvegarde du questionnaire pour:', user.id);
      
      const dominantColor = calculateDominantColor();
      
      // ‚úÖ CORRECTION : V√©rifier l'existence avec maybeSingle()
      const { data: existingResponse, error: checkError } = await supabase
        .from('questionnaire_responses')
        .select('id, completed_at')
        .eq('user_id', user.id)
        .maybeSingle();

      if (checkError && checkError.code !== 'PGRST116') {
        console.error('‚ùå Erreur v√©rification r√©ponse existante:', checkError);
        // Continuer malgr√© l'erreur
      }

      let error;
      const questionnaireData = {
        color_quiz: answers.colorQuiz,
        dominant_color: dominantColor,
        preferred_activities: answers.favoriteActivities,
        work_preferences: answers.workPreferences,
        current_talent: answers.currentTalent,
        improvement_areas: answers.improvementAreas,
        dream_description: answers.dreamDescription,
        five_year_vision: answers.fiveYearVision,
        inspiration_person: answers.inspirationPerson,
        spotbulle_needs: answers.spotbulleNeeds,
        completed_at: new Date().toISOString()
      };

      if (existingResponse?.id) {
        console.log('üìù Mise √† jour r√©ponse existante:', existingResponse.id);
        ({ error } = await supabase
          .from('questionnaire_responses')
          .update(questionnaireData)
          .eq('id', existingResponse.id));
      } else {
        console.log('üÜï Cr√©ation nouvelle r√©ponse questionnaire');
        ({ error } = await supabase
          .from('questionnaire_responses')
          .insert({
            user_id: user.id,
            ...questionnaireData
          }));
      }

      if (error) {
        console.error('‚ùå Erreur sauvegarde questionnaire:', error);
        
        // ‚úÖ CORRECTION : Gestion sp√©cifique des erreurs 406
        if (error.code === '406') {
          toast.error('Erreur de format de donn√©es. Veuillez r√©essayer.');
          return;
        }
        
        throw error;
      }

      // ‚úÖ CORRECTION : Mise √† jour du profil utilisateur avec gestion d'erreur
      try {
        await supabase
          .from('profiles')
          .update({ 
            dominant_color: dominantColor,
            updated_at: new Date().toISOString()
          })
          .eq('id', user.id);
      } catch (profileError) {
        console.warn('‚ö†Ô∏è Impossible de mettre √† jour le profil:', profileError);
        // Continuer m√™me si la mise √† jour du profil √©choue
      }

      // Afficher le r√©sultat du profil
      const profile = colorProfiles[dominantColor];
      console.log('üéâ Questionnaire sauvegard√© avec profil:', profile.name);
      toast.success(`Profil ${profile.name} identifi√© !`);
      
      if (onComplete) onComplete();
      
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde questionnaire:', error);
      toast.error('Erreur lors de la sauvegarde du questionnaire');
    } finally {
      setLoading(false);
    }
  };

  const nextStep = () => setCurrentStep(prev => prev + 1);
  const prevStep = () => setCurrentStep(prev => prev - 1);

  // Rendu des √©tapes (identique √† votre code actuel)
  const renderStep = () => {
    switch(currentStep) {
      case 1:
        return (
          <div className="space-y-6">
            <div className="text-center mb-6">
              <div className="text-4xl mb-4">üé≠</div>
              <h3 className="text-xl font-semibold text-primary-900 mb-2">
                D√©couvre ton profil √©motionnel
              </h3>
              <p className="text-gray-600">
                R√©ponds naturellement √† ces 8 questions pour r√©v√©ler ta personnalit√© unique
              </p>
            </div>
            
            <div className="space-y-6">
              {colorQuizQuestions.map((quiz, index) => (
                <div key={index} className="p-6 border-2 border-gray-200 rounded-xl bg-white hover:border-primary-200 transition-all duration-300">
                  <p className="font-medium mb-4 text-lg text-gray-800">
                    {index + 1}. {quiz.question}
                  </p>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {quiz.options.map(option => (
                      <label 
                        key={option.value} 
                        className={`flex items-start space-x-3 p-4 border-2 rounded-xl cursor-pointer transition-all duration-200 ${
                          answers.colorQuiz[index] === option.value
                            ? 'border-primary-500 bg-primary-50 shadow-sm'
                            : 'border-gray-200 hover:border-primary-300 hover:bg-gray-50'
                        }`}
                      >
                        <input
                          type="radio"
                          name={`colorQuiz-${index}`}
                          value={option.value}
                          checked={answers.colorQuiz[index] === option.value}
                          onChange={() => handleColorQuizAnswer(index, option.value)}
                          className="mt-1 text-primary-600 focus:ring-primary-500"
                        />
                        <div className="flex items-center space-x-3">
                          <span className="text-2xl">{option.emoji}</span>
                          <span className="text-gray-700 font-medium">{option.label}</span>
                        </div>
                      </label>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div className="text-center mb-6">
              <div className="text-4xl mb-4">üåü</div>
              <h3 className="text-xl font-semibold text-primary-900 mb-2">
                Tes super-pouvoirs naturels
              </h3>
              <p className="text-gray-600">
                Identifie tes intelligences multiples pour mieux les d√©velopper
              </p>
            </div>

            <div className="space-y-8">
              <div className="p-6 border-2 border-gray-200 rounded-xl bg-white">
                <p className="font-medium mb-4 text-lg text-gray-800">9. Ce que j'aime le plus faire :</p>
                <div className="grid grid-cols-1 gap-4">
                  {[
                    { value: 'kinesthetic', label: 'üèÉ Bouger, courir, manipuler des objets', description: 'Intelligence Kinesth√©sique' },
                    { value: 'musical', label: 'üéµ Chanter, √©couter de la musique', description: 'Intelligence Musicale' },
                    { value: 'linguistic', label: 'üìö Lire, √©crire, raconter des histoires', description: 'Intelligence Linguistique' },
                    { value: 'logical', label: 'üßÆ R√©soudre des probl√®mes, calculer', description: 'Intelligence Logico-math√©matique' }
                  ].map(option => (
                    <label key={option.value} className={`flex items-start space-x-4 p-4 border-2 rounded-xl cursor-pointer transition-all duration-200 ${
                      (answers.favoriteActivities || []).includes(option.value)
                        ? 'border-primary-500 bg-primary-50'
                        : 'border-gray-200 hover:border-primary-300'
                    }`}>
                      <input
                        type="checkbox"
                        checked={(answers.favoriteActivities || []).includes(option.value)}
                        onChange={(e) => handleArrayAnswer('favoriteActivities', option.value, e.target.checked)}
                        className="mt-1 text-primary-600 focus:ring-primary-500"
                      />
                      <div className="flex-1">
                        <div className="font-medium text-gray-800">{option.label}</div>
                        <div className="text-sm text-gray-600 mt-1">{option.description}</div>
                      </div>
                    </label>
                  ))}
                </div>
              </div>

              <div className="p-6 border-2 border-gray-200 rounded-xl bg-white">
                <p className="font-medium mb-4 text-lg text-gray-800">10. Quand je travaille, je pr√©f√®re :</p>
                <div className="grid grid-cols-1 gap-4">
                  {[
                    { value: 'naturalist', label: 'üå≥ √ätre dehors, observer la nature', description: 'Intelligence Naturaliste' },
                    { value: 'interpersonal', label: 'üë• √ätre avec des amis, discuter', description: 'Intelligence Interpersonnelle' },
                    { value: 'intrapersonal', label: 'üßò √ätre seul pour r√©fl√©chir', description: 'Intelligence Intrapersonnelle' },
                    { value: 'visual', label: 'üé® Dessiner, construire, imaginer', description: 'Intelligence Visuo-spatiale' }
                  ].map(option => (
                    <label key={option.value} className={`flex items-start space-x-4 p-4 border-2 rounded-xl cursor-pointer transition-all duration-200 ${
                      (answers.workPreferences || []).includes(option.value)
                        ? 'border-primary-500 bg-primary-50'
                        : 'border-gray-200 hover:border-primary-300'
                    }`}>
                      <input
                        type="checkbox"
                        checked={(answers.workPreferences || []).includes(option.value)}
                        onChange={(e) => handleArrayAnswer('workPreferences', option.value, e.target.checked)}
                        className="mt-1 text-primary-600 focus:ring-primary-500"
                      />
                      <div className="flex-1">
                        <div className="font-medium text-gray-800">{option.label}</div>
                        <div className="text-sm text-gray-600 mt-1">{option.description}</div>
                      </div>
                    </label>
                  ))}
                </div>
              </div>
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <div className="text-center mb-6">
              <div className="text-4xl mb-4">üöÄ</div>
              <h3 className="text-xl font-semibold text-primary-900 mb-2">
                Ton avenir commence ici
              </h3>
              <p className="text-gray-600">
                Partage tes r√™ves et construisons ensemble ton parcours
              </p>
            </div>

            <div className="space-y-6">
              {[
                { key: 'currentTalent', label: '11. Mon plus grand talent aujourd\'hui est :', placeholder: 'D√©cris ce que tu fais le mieux naturellement...', emoji: 'üíé' },
                { key: 'improvementAreas', label: '12. Ce que je voudrais am√©liorer chez moi :', placeholder: 'Quelles comp√©tences souhaiterais-tu d√©velopper ?', emoji: 'üìà' },
                { key: 'dreamDescription', label: '13. Si je devais d√©crire mon r√™ve en une phrase :', placeholder: 'Ton plus grand r√™ve, m√™me le plus fou...', emoji: 'üåà' },
                { key: 'fiveYearVision', label: '14. Dans 5 ans, je voudrais que les gens disent de moi :', placeholder: 'Comment aimerais-tu √™tre per√ßu dans 5 ans ?', emoji: 'üîÆ' },
                { key: 'inspirationPerson', label: '15. La personne qui m\'inspire le plus est :', placeholder: 'Qui t\'inspire dans la vie, le sport ou ailleurs ?', emoji: 'üëë' }
              ].map(field => (
                <div key={field.key} className="p-4 border-2 border-gray-200 rounded-xl bg-white">
                  <label className="block font-medium mb-3 text-gray-800 flex items-center space-x-2">
                    <span>{field.emoji}</span>
                    <span>{field.label}</span>
                  </label>
                  <textarea
                    value={answers[field.key] || ''}
                    onChange={(e) => handleAnswer(field.key, e.target.value)}
                    className="w-full p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all resize-none"
                    rows={3}
                    placeholder={field.placeholder}
                  />
                </div>
              ))}

              <div className="p-6 border-2 border-gray-200 rounded-xl bg-white">
                <p className="font-medium mb-4 text-lg text-gray-800 flex items-center space-x-2">
                  <span>üéØ</span>
                  <span>16. Si SpotBulle devait m'aider, j'aimerais que ce soit pour :</span>
                </p>
                <div className="grid grid-cols-1 gap-3">
                  {[
                    'M\'exprimer mieux √† l\'oral',
                    '√ätre plus s√ªr de moi',
                    'Trouver un mentor ou un mod√®le',
                    'Construire mon futur m√©tier',
                    'Am√©liorer mes gestes techniques',
                    'Pr√©parer des comp√©titions importantes'
                  ].map(need => (
                    <label key={need} className={`flex items-center space-x-4 p-4 border-2 rounded-xl cursor-pointer transition-all duration-200 ${
                      (answers.spotbulleNeeds || []).includes(need)
                        ? 'border-primary-500 bg-primary-50'
                        : 'border-gray-200 hover:border-primary-300'
                    }`}>
                      <input
                        type="checkbox"
                        checked={(answers.spotbulleNeeds || []).includes(need)}
                        onChange={(e) => handleArrayAnswer('spotbulleNeeds', need, e.target.checked)}
                        className="text-primary-600 focus:ring-primary-500"
                      />
                      <span className="text-gray-700 font-medium">{need}</span>
                    </label>
                  ))}
                </div>
              </div>
            </div>
          </div>
        );

      case 4:
        const dominantColor = calculateDominantColor();
        const profile = colorProfiles[dominantColor];
        
        return (
          <div className="text-center space-y-8">
            <div className={`p-8 rounded-2xl bg-gradient-to-br border-4 ${
              dominantColor === 'red' ? 'from-red-50 to-red-100 border-red-200' :
              dominantColor === 'blue' ? 'from-blue-50 to-blue-100 border-blue-200' :
              dominantColor === 'green' ? 'from-green-50 to-green-100 border-green-200' :
              'from-yellow-50 to-yellow-100 border-yellow-200'
            }`}>
              <div className="text-6xl mb-4">{profile.emoji}</div>
              <h3 className="text-3xl font-bold text-gray-900 mb-3">{profile.name}</h3>
              <p className="text-lg text-gray-700 mb-6">{profile.description}</p>
              
              <div className="mb-6">
                <h4 className="font-semibold text-gray-800 mb-3">Tes caract√©ristiques principales :</h4>
                <div className="space-y-2">
                  {profile.characteristics.map((trait, index) => (
                    <div key={index} className="flex items-center justify-center space-x-2">
                      <span className="text-green-500">‚úì</span>
                      <span className="text-gray-700">{trait}</span>
                    </div>
                  ))}
                </div>
              </div>
              
              <div className="flex justify-center gap-3 mb-6">
                {profile.traits.map((trait, index) => (
                  <span key={index} className="px-4 py-2 bg-white/80 rounded-full text-sm font-semibold shadow-sm">
                    {trait}
                  </span>
                ))}
              </div>
              
              <div className="bg-white/80 rounded-lg p-4 border">
                <p className="text-sm text-gray-600">
                  <strong>üéØ Ton QR code de restitution</strong> est disponible dans ton tableau de bord personnel
                </p>
              </div>
            </div>
            
            <div className="bg-blue-50 border border-blue-200 rounded-xl p-6">
              <div className="flex items-center justify-center space-x-3 mb-3">
                <span className="text-2xl">‚ú®</span>
                <h4 className="text-lg font-semibold text-blue-800">Parcours personnalis√© activ√© !</h4>
              </div>
              <p className="text-blue-700">
                Acc√®de maintenant aux <strong>simulateurs et sc√©narios adapt√©s</strong> √† ton profil unique.<br/>
                Ton aventure SpotBulle Immersion commence ici !
              </p>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  const allColorQuestionsAnswered = answers.colorQuiz.every(answer => answer !== '');
  const canProceed = currentStep === 1 ? allColorQuestionsAnswered : true;

  return (
    <div className={`bg-white rounded-2xl shadow-xl ${isModal ? '' : 'p-8 max-w-4xl mx-auto'}`}>
      <div className="text-center mb-8">
        <h2 className="text-3xl font-bold text-primary-900 mb-3">
          {currentStep === 4 ? 'üéâ Profil Identifi√© !' : 'üìù Questionnaire SpotBulle Immersion'}
        </h2>
        <p className="text-gray-600 text-lg">
          {currentStep === 4 ? 'D√©couvre ta personnalit√© unique et commence ton aventure' : 'Compl√®te ton profil pour un parcours 100% personnalis√©'}
        </p>
        
        {currentStep < 4 && (
          <div className="flex justify-center space-x-3 mt-6">
            {[1, 2, 3].map(step => (
              <div key={step} className="flex flex-col items-center">
                <div
                  className={`w-10 h-10 rounded-full flex items-center justify-center font-semibold ${
                    step === currentStep 
                      ? 'bg-primary-600 text-white' 
                      : step < currentStep 
                        ? 'bg-primary-100 text-primary-600 border-2 border-primary-600' 
                        : 'bg-gray-100 text-gray-400 border-2 border-gray-300'
                  }`}
                >
                  {step}
                </div>
                <span className={`text-xs mt-2 font-medium ${
                  step === currentStep ? 'text-primary-600' : 'text-gray-500'
                }`}>
                  {step === 1 ? 'Profil' : step === 2 ? 'Talents' : 'R√™ves'}
                </span>
              </div>
            ))}
          </div>
        )}
      </div>

      {renderStep()}

      {currentStep < 4 && (
        <div className="flex justify-between items-center mt-10 pt-6 border-t border-gray-200">
          <Button
            onClick={prevStep}
            disabled={currentStep === 1}
            variant="outline"
            className="px-8 py-3 border-2"
          >
            ‚Üê Pr√©c√©dent
          </Button>

          <div className="flex items-center space-x-4">
            {showSkip && (
              <Button
                onClick={onComplete}
                variant="outline"
                className="px-6 py-3 border-2 text-gray-600"
              >
                Passer pour plus tard
              </Button>
            )}
            
            {currentStep < 3 ? (
              <Button
                onClick={nextStep}
                disabled={!canProceed}
                className="bg-primary-600 hover:bg-primary-700 px-8 py-3 text-white font-semibold"
              >
                Continuer ‚Üí
              </Button>
            ) : (
              <Button
                onClick={submitQuestionnaire}
                loading={loading}
                disabled={!canProceed}
                className="bg-gradient-to-r from-primary-600 to-primary-700 hover:from-primary-700 hover:to-primary-800 px-8 py-3 text-white font-semibold shadow-lg"
              >
                {loading ? 'üîÑ Sauvegarde...' : 'üéØ D√©couvrir mon profil'}
              </Button>
            )}
          </div>
        </div>
      )}

      {currentStep === 4 && (
        <div className="flex justify-center mt-8 pt-6 border-t border-gray-200">
          <Button
            onClick={onComplete}
            className="bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 px-10 py-4 text-white font-semibold text-lg shadow-xl"
          >
            üöÄ Commencer l'aventure SpotBulle ‚Üí
          </Button>
        </div>
      )}
    </div>
  );
};

export default Questionnaire;
