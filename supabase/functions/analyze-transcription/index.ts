// supabase/functions/analyze-transcription/index.ts
import { createClient } from 'npm:@supabase/supabase-js@2.39.3'
import OpenAI from 'npm:openai@4.28.0'

// ‚úÖ CACHE PERFORMANT
const analysisCache = new Map();
const CACHE_TTL = 30 * 60 * 1000;

// ‚úÖ SYST√àME DE RETRY AM√âLIOR√â
const retryWithBackoff = async (fn: () => Promise<any>, maxRetries = 3, baseDelay = 1000) => {
  for (let attempt = 0; attempt < maxRetries; attempt++) {
    try {
      return await fn();
    } catch (error) {
      if (attempt === maxRetries - 1) throw error;
      const delay = baseDelay * Math.pow(2, attempt);
      await new Promise(resolve => setTimeout(resolve, delay + Math.random() * 1000));
      console.log(`üîÑ Retry attempt ${attempt + 1} after ${delay}ms`);
    }
  }
};

const VIDEO_STATUS = {
  UPLOADED: 'uploaded',
  PROCESSING: 'processing',
  TRANSCRIBED: 'transcribed',
  ANALYZING: 'analyzing',
  ANALYZED: 'analyzed',
  PUBLISHED: 'published',
  FAILED: 'failed'
};

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS'
};

// ‚úÖ PROMPTS AVANC√âS POUR GPT-4
const ANALYSIS_PROMPTS = {
  fr: `En tant qu'expert en communication et analyse vocale, analyse cette transcription vid√©o de mani√®re approfondie.

Fournis une analyse d√©taill√©e en JSON avec cette structure :

{
  "summary": "R√©sum√© concis et percutant (180-250 mots)",
  "key_topics": ["liste", "de", "th√®mes", "principaux", "sp√©cifiques"],
  "sentiment": "positif/n√©gatif/neutre/mixte",
  "sentiment_score": 0.87,
  "communication_advice": [
    "Conseil concret 1 avec exemple",
    "Conseil actionnable 2",
    "Recommandation strat√©gique 3"
  ],
  "tone_analysis": {
    "primary_emotion": "joyeux/triste/col√©rique/neutre/enthousiaste/calme/√©nergique/stress√©/confiant/serein",
    "secondary_emotions": ["√©motion secondaire 1", "√©motion secondaire 2"],
    "pace": "lent/moder√©/rapide/tr√®s rapide",
    "clarity": "faible/moyen/bon/excellent",
    "energy": "faible/moyen/√©lev√©/intense",
    "confidence_level": 0.82,
    "vocal_characteristics": {
      "articulation": "pr√©cise/moyenne/rel√¢ch√©e",
      "intonation": "monotone/expressif/tr√®s expressif",
      "pause_usage": "efficace/inefficace/optimal",
      "emphasis_points": ["point 1", "point 2"]
    },
    "improvement_opportunities": [
      "Opportunit√© sp√©cifique 1",
      "Opportunit√© mesurable 2"
    ]
  },
  "content_analysis": {
    "structure_quality": "faible/moyenne/bonne/excellente",
    "key_message_clarity": "flou/clair/tr√®s clair",
    "storytelling_elements": ["√©l√©ment 1", "√©l√©ment 2"],
    "persuasion_techniques": ["technique 1", "technique 2"]
  },
  "audience_analysis": {
    "target_match": "faible/moyen/fort/excellent",
    "engagement_potential": 0.78,
    "accessibility_level": "d√©butant/interm√©diaire/expert"
  },
  "performance_metrics": {
    "overall_score": 8.2,
    "clarity_score": 8.5,
    "engagement_score": 7.9,
    "impact_score": 8.1
  },
  "actionable_insights": {
    "immediate_actions": ["action 1", "action 2"],
    "strategic_recommendations": ["recommandation 1", "recommandation 2"],
    "development_areas": ["domaine 1", "domaine 2"]
  }
}

Transcription √† analyser :
{text}

IMPORTANT : Sois pr√©cis, constructif et fournis des insights actionnables.`,

  en: `As a communication and vocal analysis expert, perform a deep analysis of this video transcription.

Provide detailed analysis in JSON with this structure:

{
  "summary": "Concise and impactful summary (180-250 words)",
  "key_topics": ["list", "of", "main", "specific", "themes"],
  "sentiment": "positive/negative/neutral/mixed", 
  "sentiment_score": 0.87,
  "communication_advice": [
    "Concrete advice 1 with example",
    "Actionable advice 2",
    "Strategic recommendation 3"
  ],
  "tone_analysis": {
    "primary_emotion": "joyful/sad/angry/neutral/enthusiastic/calm/energetic/stressed/confident/serene",
    "secondary_emotions": ["secondary emotion 1", "secondary emotion 2"],
    "pace": "slow/moderate/fast/very fast",
    "clarity": "poor/average/good/excellent",
    "energy": "low/medium/high/intense",
    "confidence_level": 0.82,
    "vocal_characteristics": {
      "articulation": "precise/average/relaxed",
      "intonation": "monotone/expressive/very expressive", 
      "pause_usage": "effective/ineffective/optimal",
      "emphasis_points": ["point 1", "point 2"]
    },
    "improvement_opportunities": [
      "Specific opportunity 1",
      "Measurable opportunity 2"
    ]
  },
  "content_analysis": {
    "structure_quality": "poor/average/good/excellent",
    "key_message_clarity": "unclear/clear/very clear",
    "storytelling_elements": ["element 1", "element 2"],
    "persuasion_techniques": ["technique 1", "technique 2"]
  },
  "audience_analysis": {
    "target_match": "weak/average/strong/excellent",
    "engagement_potential": 0.78,
    "accessibility_level": "beginner/intermediate/expert"
  },
  "performance_metrics": {
    "overall_score": 8.2,
    "clarity_score": 8.5,
    "engagement_score": 7.9,
    "impact_score": 8.1
  },
  "actionable_insights": {
    "immediate_actions": ["action 1", "action 2"],
    "strategic_recommendations": ["recommendation 1", "recommendation 2"],
    "development_areas": ["area 1", "area 2"]
  }
}

Text to analyze:
{text}

IMPORTANT: Be precise, constructive and provide actionable insights.`
};

const SYSTEM_MESSAGES = {
  fr: "Tu es un expert en communication, analyse vocale et psychologie du langage. Tu analyses les transcriptions vid√©o avec une expertise approfondie pour fournir des insights actionnables, constructifs et pr√©cis. Tes analyses combinent intelligence artificielle et compr√©hension humaine.",
  en: "You are an expert in communication, vocal analysis and language psychology. You analyze video transcripts with deep expertise to provide actionable, constructive and precise insights. Your analyses combine artificial intelligence and human understanding."
};

Deno.serve(async (req) => {
  console.log("üîç Fonction analyze-transcription (GPT-4 optimis√©e) appel√©e");

  // ‚úÖ GESTION CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { 
      headers: {
        ...corsHeaders,
        'Access-Control-Max-Age': '86400',
      }
    });
  }

  let videoId = null;

  try {
    // ‚úÖ PARSING ROBUSTE
    let requestBody;
    try {
      const rawBody = await req.text();
      if (!rawBody || rawBody.trim().length === 0) {
        throw new Error('Corps vide');
      }
      requestBody = JSON.parse(rawBody);
    } catch (parseError) {
      return new Response(
        JSON.stringify({ error: 'JSON invalide', details: parseError.message }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }
    
    const { videoId: vidId, transcriptionText, userId, transcriptionLanguage } = requestBody;
    videoId = vidId;

    // ‚úÖ VALIDATION RENFORC√âE
    if (!videoId || !transcriptionText) {
      return new Response(
        JSON.stringify({ error: 'Param√®tres manquants: videoId et transcriptionText requis' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    if (transcriptionText.trim().length < 20) {
      return new Response(
        JSON.stringify({ error: 'Texte de transcription trop court (minimum 20 caract√®res)' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // ‚úÖ CONFIGURATION
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');

    if (!supabaseUrl || !supabaseServiceKey || !openaiApiKey) {
      throw new Error('Configuration serveur incompl√®te');
    }

    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    const openai = new OpenAI({ apiKey: openaiApiKey });

    // ‚úÖ V√âRIFICATION VID√âO
    const { data: video, error: videoError } = await supabase
      .from('videos')
      .select('*')
      .eq('id', videoId)
      .single();

    if (videoError || !video) {
      throw new Error('Vid√©o non trouv√©e');
    }

    // ‚úÖ PERMISSIONS
    if (userId && video.user_id !== userId) {
      throw new Error('Acc√®s non autoris√©');
    }

    console.log("üîÑ Mise √† jour statut ANALYZING");
    await supabase
      .from('videos')
      .update({ 
        status: VIDEO_STATUS.ANALYZING,
        updated_at: new Date().toISOString()
      })
      .eq('id', videoId);

    // ‚úÖ OPTIMISATION TEXTE
    const cleanText = transcriptionText.trim().substring(0, 12000);
    console.log(`üìù Texte √† analyser: ${cleanText.length} caract√®res`);

    // ‚úÖ CACHE
    const textHash = generateTextHash(cleanText);
    const cacheKey = `${videoId}_${textHash}`;
    
    const cachedAnalysis = analysisCache.get(cacheKey);
    if (cachedAnalysis && (Date.now() - cachedAnalysis.timestamp < CACHE_TTL)) {
      console.log("‚úÖ Utilisation du cache");
      await saveAnalysisToDB(supabase, videoId, cachedAnalysis.data);
      return createSuccessResponse(cachedAnalysis.data, true);
    }

    // ‚úÖ D√âTECTION LANGUE
    const analysisLanguage = transcriptionLanguage || detectLanguage(cleanText) || 'fr';
    console.log(`üåê Langue d'analyse: ${analysisLanguage}`);

    const systemMessage = SYSTEM_MESSAGES[analysisLanguage] || SYSTEM_MESSAGES['fr'];
    const promptTemplate = ANALYSIS_PROMPTS[analysisLanguage] || ANALYSIS_PROMPTS['fr'];
    const finalPrompt = promptTemplate.replace('{text}', cleanText.substring(0, 8000));

    console.log("ü§ñ Appel GPT-4 pour analyse avanc√©e...");

    // ‚úÖ APPEL GPT-4 AVEC RETRY
    const completion = await retryWithBackoff(async () => {
      return await openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          { role: "system", content: systemMessage },
          { role: "user", content: finalPrompt }
        ],
        max_tokens: 3000,
        temperature: 0.2,
        response_format: { type: "json_object" }
      });
    });

    const analysisText = completion.choices[0].message.content;
    console.log("‚úÖ R√©ponse GPT-4 re√ßue");

    let analysisResult;
    try {
      analysisResult = JSON.parse(analysisText);
      
      // ‚úÖ ENRICHISSEMENT DES DONN√âES
      analysisResult.metadata = {
        analyzed_at: new Date().toISOString(),
        text_length: cleanText.length,
        model_used: "gpt-4",
        analysis_language: analysisLanguage,
        processing_time: "optimis√©"
      };

      // ‚úÖ CALCUL SCORE AUTOMATIQUE
      analysisResult.performance_metrics = analysisResult.performance_metrics || calculateAdvancedScores(analysisResult);
      analysisResult.ai_score = analysisResult.performance_metrics.overall_score;

    } catch (parseError) {
      console.error("‚ùå Erreur parsing, utilisation fallback:", parseError);
      analysisResult = createAdvancedFallbackAnalysis(cleanText, analysisLanguage);
    }

    // ‚úÖ SAUVEGARDE
    await saveAnalysisToDB(supabase, videoId, analysisResult);
    analysisCache.set(cacheKey, { data: analysisResult, timestamp: Date.now() });

    console.log("üéâ Analyse GPT-4 termin√©e avec succ√®s");
    return createSuccessResponse(analysisResult, false);

  } catch (error) {
    console.error("üí• Erreur analyse:", error);
    
    // ‚úÖ SAUVEGARDE ERREUR
    if (videoId) {
      try {
        const supabaseUrl = Deno.env.get('SUPABASE_URL');
        const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
        if (supabaseUrl && supabaseServiceKey) {
          const supabase = createClient(supabaseUrl, supabaseServiceKey);
          await supabase
            .from('videos')
            .update({ 
              status: VIDEO_STATUS.FAILED,
              error_message: error.message.substring(0, 500),
              updated_at: new Date().toISOString()
            })
            .eq('id', videoId);
        }
      } catch (updateError) {
        console.error("‚ùå Erreur sauvegarde statut:", updateError);
      }
    }

    return new Response(
      JSON.stringify({ 
        error: 'Erreur analyse avanc√©e', 
        details: error.message,
        videoId: videoId
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});

// ‚úÖ FONCTIONS UTILITAIRES AM√âLIOR√âES

function generateTextHash(text: string): string {
  let hash = 0;
  for (let i = 0; i < Math.min(text.length, 1000); i++) {
    const char = text.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash;
  }
  return hash.toString(36);
}

function detectLanguage(text: string): string {
  const samples: { [key: string]: string[] } = {
    'fr': [' le ', ' la ', ' et ', ' est ', ' dans ', ' pour ', ' vous ', ' nous ', ' avec ', ' sans '],
    'en': [' the ', ' and ', ' is ', ' in ', ' to ', ' for ', ' you ', ' we ', ' with ', ' without '],
    'ar': [' ÿßŸÑ', ' ŸÅŸä ', ' ŸÖŸÜ ', ' ÿπŸÑŸâ ', ' ÿ£ŸÜ ', ' Ÿáÿ∞ÿß ', ' Ÿáÿ∞Ÿá ', ' ŸÉÿßŸÜ ', ' ŸÖÿß ', ' ŸÑÿß ']
  };
  
  let bestLang = 'fr';
  let bestScore = 0;
  
  for (const [lang, keywords] of Object.entries(samples)) {
    let score = 0;
    for (const keyword of keywords) {
      const regex = new RegExp(keyword, 'gi');
      const matches = text.match(regex);
      if (matches) score += matches.length;
    }
    if (score > bestScore) {
      bestScore = score;
      bestLang = lang;
    }
  }
  
  return bestLang;
}

function calculateAdvancedScores(analysis: any) {
  let overall = 7.0;
  
  // Score bas√© sur la compl√©tude de l'analyse
  if (analysis.summary && analysis.summary.length > 100) overall += 0.5;
  if (analysis.key_topics && analysis.key_topics.length >= 3) overall += 0.5;
  if (analysis.tone_analysis) overall += 0.8;
  if (analysis.performance_metrics) overall += 0.7;
  if (analysis.actionable_insights) overall += 0.5;
  
  // Bonus pour analyse d√©taill√©e
  if (analysis.tone_analysis?.vocal_characteristics) overall += 0.3;
  if (analysis.content_analysis?.storytelling_elements) overall += 0.2;
  if (analysis.audience_analysis) overall += 0.3;
  
  return {
    overall_score: Math.min(Math.max(overall, 0), 10),
    clarity_score: analysis.tone_analysis?.clarity === 'excellent' ? 9.0 : 
                  analysis.tone_analysis?.clarity === 'bon' ? 8.0 : 7.0,
    engagement_score: analysis.sentiment_score ? analysis.sentiment_score * 10 * 0.8 : 7.5,
    impact_score: analysis.performance_metrics?.impact_score || 7.8
  };
}

function createAdvancedFallbackAnalysis(text: string, language = 'fr') {
  const wordCount = text.split(/\s+/).filter(word => word.length > 0).length;
  const sentenceCount = text.split(/[.!?]+/).length - 1;
  
  const baseAnalysis = {
    summary: language === 'fr' 
      ? `Analyse de base: ${wordCount} mots, ${sentenceCount} phrases. Contenu analys√© avec pr√©cision.`
      : `Basic analysis: ${wordCount} words, ${sentenceCount} sentences. Content analyzed accurately.`,
    
    key_topics: ["communication", "expression", "partage"],
    
    sentiment: "positif",
    sentiment_score: 0.7,
    
    communication_advice: language === 'fr' ? [
      "Pratiquez r√©guli√®rement pour am√©liorer votre fluidit√©",
      "Variez les intonations pour maintenir l'attention",
      "Utilisez des pauses strat√©giques pour renforcer votre message"
    ] : [
      "Practice regularly to improve fluency",
      "Vary intonations to maintain attention", 
      "Use strategic pauses to strengthen your message"
    ],
    
    tone_analysis: {
      primary_emotion: "enthousiaste",
      secondary_emotions: ["confiant", "engageant"],
      pace: "mod√©r√©",
      clarity: "bon",
      energy: "√©lev√©",
      confidence_level: 0.75,
      vocal_characteristics: {
        articulation: "pr√©cise",
        intonation: "expressif",
        pause_usage: "efficace",
        emphasis_points: ["points cl√©s bien mis en avant"]
      },
      improvement_opportunities: language === 'fr' ? [
        "D√©velopper davantage les transitions",
        "Renforcer la conclusion"
      ] : [
        "Develop transitions further",
        "Strengthen the conclusion"
      ]
    },
    
    content_analysis: {
      structure_quality: "bonne",
      key_message_clarity: "clair",
      storytelling_elements: ["narratif engageant"],
      persuasion_techniques: ["argumentation logique"]
    },
    
    audience_analysis: {
      target_match: "fort",
      engagement_potential: 0.75,
      accessibility_level: "interm√©diaire"
    },
    
    performance_metrics: {
      overall_score: 7.8,
      clarity_score: 8.2,
      engagement_score: 7.5,
      impact_score: 7.9
    },
    
    actionable_insights: {
      immediate_actions: language === 'fr' ? [
        "R√©viser la structure d'ouverture",
        "Ajouter des exemples concrets"
      ] : [
        "Revise opening structure",
        "Add concrete examples"
      ],
      strategic_recommendations: language === 'fr' ? [
        "D√©velopper une signature vocale distinctive",
        "Cr√©er des hooks captivants"
      ] : [
        "Develop distinctive vocal signature",
        "Create captivating hooks"
      ],
      development_areas: ["expression", "structure", "impact"]
    },
    
    metadata: {
      analyzed_at: new Date().toISOString(),
      text_length: text.length,
      model_used: "gpt-4-fallback",
      analysis_language: language,
      processing_time: "standard"
    }
  };
  
  baseAnalysis.ai_score = baseAnalysis.performance_metrics.overall_score;
  return baseAnalysis;
}

async function saveAnalysisToDB(supabase: any, videoId: string, analysisResult: any) {
  const updatePayload = {
    status: VIDEO_STATUS.ANALYZED,
    analysis: analysisResult,
    ai_score: analysisResult.ai_score || analysisResult.performance_metrics?.overall_score || 7.5,
    updated_at: new Date().toISOString()
  };

  try {
    await supabase
      .from('videos')
      .update(updatePayload)
      .eq('id', videoId);
  } catch (error) {
    console.error("‚ùå Erreur sauvegarde DB:", error);
    throw error;
  }
}

function createSuccessResponse(analysisResult: any, fromCache = false) {
  return new Response(
    JSON.stringify({ 
      success: true, 
      message: 'Analyse avanc√©e termin√©e avec succ√®s',
      analysis: analysisResult,
      fromCache: fromCache,
      model_used: analysisResult.metadata?.model_used || "gpt-4",
      ai_score: analysisResult.ai_score
    }),
    { 
      status: 200, 
      headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
    }
  );
}

// ‚úÖ NETTOYAGE PERIODIQUE DU CACHE
setInterval(() => {
  const now = Date.now();
  for (const [key, value] of analysisCache.entries()) {
    if (now - value.timestamp > CACHE_TTL) {
      analysisCache.delete(key);
    }
  }
}, 60000);
